"""
This migration is used to setup the Stripe billing system.

It creates the Stripe products and prices for the billing plans.
"""

# Generated by Django 5.1.4 on 2025-01-20 07:15
from billing.models import BillingPlan
from django.conf import settings
from django.db import migrations
from django.db.models import Q
from django.db import models
import stripe
import time


PRICE_PLANS = {
    'business': {
        'annual': 159*12,
        'monthly': 199,
    }
}


def setup_stripe_billing(apps, schema_editor):
    stripe.api_key = settings.STRIPE_API_KEY

    for plan in BillingPlan.objects.filter(~Q(key__exact='community'), max_products__isnull=False, max_projects__isnull=False):
        # Create the product
        product = stripe.Product.create(
            name=plan.key,
            description=plan.description,
        )

        # Store the product ID
        plan.stripe_product_id = product.id

        # Create price plans if defined
        if plan.key in PRICE_PLANS:
            # Create monthly price
            monthly_price = stripe.Price.create(
                product=product.id,
                unit_amount=PRICE_PLANS[plan.key]['monthly'] * 100,  # Amount in cents
                currency='usd',
                recurring={
                    'interval': 'month',
                    'interval_count': 1
                },
                metadata={
                    'billing_period': 'monthly'
                }
            )
            plan.stripe_price_monthly_id = monthly_price.id

            # Create annual price with built-in discount
            annual_price = stripe.Price.create(
                product=product.id,
                unit_amount=PRICE_PLANS[plan.key]['annual'] * 100,  # Amount in cents
                currency='usd',
                recurring={
                    'interval': 'year',
                    'interval_count': 1
                },
                metadata={
                    'billing_period': 'annual'
                }
            )
            plan.stripe_price_annual_id = annual_price.id

            # Save the plan with Stripe IDs
            plan.save()


def cleanup_stripe_billing(apps, schema_editor):
    stripe.api_key = settings.STRIPE_API_KEY

    # Get all products and store them in a dict by key with key being the product name
    products = {product.name: product for product in stripe.Product.list()}

    for plan in BillingPlan.objects.filter(~Q(key__exact='community'), max_products__isnull=False, max_projects__isnull=False):
        if plan.key not in products:
            print(f"Product {plan.key} not found in Stripe")
            continue

        product = products[plan.key]

        # First deactivate all prices associated with the product
        prices = stripe.Price.list(product=product.id, active=True)
        for price in prices.data:
            stripe.Price.modify(
                price.id,
                active=False
            )

        # Wait a moment to ensure price updates are processed
        time.sleep(1)

        try:
            # Then try to delete the product
            stripe.Product.delete(product.id)
        except stripe.error.InvalidRequestError as e:
            print(f"Could not delete product {plan.key}: {str(e)}")

        # Clear Stripe IDs regardless of deletion success
        plan.stripe_product_id = None
        plan.stripe_price_monthly_id = None
        plan.stripe_price_annual_id = None
        plan.save()


class Migration(migrations.Migration):

    dependencies = [
        ("billing", "0002_billing_plans_data"),
    ]

    operations = [
        migrations.AddField(
            model_name="billingplan",
            name="stripe_product_id",
            field=models.CharField(max_length=100, null=True),
        ),
        migrations.AddField(
            model_name="billingplan",
            name="stripe_price_monthly_id",
            field=models.CharField(max_length=100, null=True),
        ),
        migrations.AddField(
            model_name="billingplan",
            name="stripe_price_annual_id",
            field=models.CharField(max_length=100, null=True),
        ),
        migrations.RunPython(setup_stripe_billing, cleanup_stripe_billing),
    ]
